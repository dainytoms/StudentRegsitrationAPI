// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StudentRegistrationAPI.Data;

#nullable disable

namespace StudentRegistrationAPI.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220206160202_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("StudentRegistrationAPI.ApplicationQuestions", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("CollegeNamesID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FieldQuestionsID")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionTypesID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<int?>("UsersID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CollegeNamesID");

                    b.HasIndex("FieldQuestionsID");

                    b.HasIndex("QuestionTypesID");

                    b.HasIndex("UsersID");

                    b.ToTable("ApplicationQuestion");
                });

            modelBuilder.Entity("StudentRegistrationAPI.Choices", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayText")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("FieldQuestionID")
                        .HasColumnType("int");

                    b.Property<int?>("FieldQuestionsID")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<int?>("UsersID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("FieldQuestionsID");

                    b.HasIndex("UsersID");

                    b.ToTable("Choices");
                });

            modelBuilder.Entity("StudentRegistrationAPI.CollegeNames", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("CollegeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.ToTable("CollegeName");
                });

            modelBuilder.Entity("StudentRegistrationAPI.DetailsCategory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.ToTable("DetailsCategory");
                });

            modelBuilder.Entity("StudentRegistrationAPI.FieldQuestions", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DetailsCategoryID")
                        .HasColumnType("int");

                    b.Property<string>("FieldDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("UsersID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("DetailsCategoryID");

                    b.HasIndex("UsersID");

                    b.ToTable("FieldQuestion");
                });

            modelBuilder.Entity("StudentRegistrationAPI.QuestionTypes", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("QuestionTypeName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("ID");

                    b.ToTable("QuestionType");
                });

            modelBuilder.Entity("StudentRegistrationAPI.ResponseLog", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StudentSubmissionsID")
                        .HasColumnType("int");

                    b.Property<int>("UsersID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("StudentSubmissionsID");

                    b.HasIndex("UsersID");

                    b.ToTable("ResponseLogs");
                });

            modelBuilder.Entity("StudentRegistrationAPI.StudentSubmissions", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Answers")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("ApplicationQuestionsID")
                        .HasColumnType("int");

                    b.Property<int>("CollegeNamesID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DetailsCategoryID")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<int?>("UsersID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ApplicationQuestionsID");

                    b.HasIndex("CollegeNamesID");

                    b.HasIndex("DetailsCategoryID");

                    b.HasIndex("UsersID");

                    b.ToTable("StudentSubmissions");
                });

            modelBuilder.Entity("StudentRegistrationAPI.Users", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("CollegeNamesID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("UserTypeID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CollegeNamesID");

                    b.HasIndex("UserTypeID");

                    b.ToTable("User");
                });

            modelBuilder.Entity("StudentRegistrationAPI.UserType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("UserTypeName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("ID");

                    b.ToTable("UserTypes");
                });

            modelBuilder.Entity("StudentRegistrationAPI.ApplicationQuestions", b =>
                {
                    b.HasOne("StudentRegistrationAPI.CollegeNames", "CollegeNames")
                        .WithMany()
                        .HasForeignKey("CollegeNamesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentRegistrationAPI.FieldQuestions", "FieldQuestions")
                        .WithMany()
                        .HasForeignKey("FieldQuestionsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentRegistrationAPI.QuestionTypes", "QuestionTypes")
                        .WithMany()
                        .HasForeignKey("QuestionTypesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentRegistrationAPI.Users", "Users")
                        .WithMany()
                        .HasForeignKey("UsersID");

                    b.Navigation("CollegeNames");

                    b.Navigation("FieldQuestions");

                    b.Navigation("QuestionTypes");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("StudentRegistrationAPI.Choices", b =>
                {
                    b.HasOne("StudentRegistrationAPI.FieldQuestions", "FieldQuestions")
                        .WithMany()
                        .HasForeignKey("FieldQuestionsID");

                    b.HasOne("StudentRegistrationAPI.Users", "Users")
                        .WithMany()
                        .HasForeignKey("UsersID");

                    b.Navigation("FieldQuestions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("StudentRegistrationAPI.FieldQuestions", b =>
                {
                    b.HasOne("StudentRegistrationAPI.DetailsCategory", "DetailsCategory")
                        .WithMany()
                        .HasForeignKey("DetailsCategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentRegistrationAPI.Users", "Users")
                        .WithMany()
                        .HasForeignKey("UsersID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DetailsCategory");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("StudentRegistrationAPI.ResponseLog", b =>
                {
                    b.HasOne("StudentRegistrationAPI.StudentSubmissions", "StudentSubmissions")
                        .WithMany()
                        .HasForeignKey("StudentSubmissionsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentRegistrationAPI.Users", "Users")
                        .WithMany()
                        .HasForeignKey("UsersID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StudentSubmissions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("StudentRegistrationAPI.StudentSubmissions", b =>
                {
                    b.HasOne("StudentRegistrationAPI.ApplicationQuestions", "ApplicationQuestions")
                        .WithMany()
                        .HasForeignKey("ApplicationQuestionsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentRegistrationAPI.CollegeNames", "CollegeNames")
                        .WithMany()
                        .HasForeignKey("CollegeNamesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentRegistrationAPI.DetailsCategory", "DetailsCategory")
                        .WithMany()
                        .HasForeignKey("DetailsCategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentRegistrationAPI.Users", "Users")
                        .WithMany()
                        .HasForeignKey("UsersID");

                    b.Navigation("ApplicationQuestions");

                    b.Navigation("CollegeNames");

                    b.Navigation("DetailsCategory");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("StudentRegistrationAPI.Users", b =>
                {
                    b.HasOne("StudentRegistrationAPI.CollegeNames", "CollegeNames")
                        .WithMany()
                        .HasForeignKey("CollegeNamesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentRegistrationAPI.UserType", "UserType")
                        .WithMany()
                        .HasForeignKey("UserTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CollegeNames");

                    b.Navigation("UserType");
                });
#pragma warning restore 612, 618
        }
    }
}
